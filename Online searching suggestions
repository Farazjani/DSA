class TrieNode:
    def __init__(self):
        self.children = {}
        self.is_end_of_word = False

class Trie:
    def __init__(self):
        self.root = TrieNode()

    # Insert a word into the Trie
    def insert(self, word):
        node = self.root
        for char in word:
            if char not in node.children:
                node.children[char] = TrieNode()
            node = node.children[char]
        node.is_end_of_word = True

    # Search for words with a given prefix
    def search_with_prefix(self, prefix):
        node = self.root
        for char in prefix:
            if char not in node.children:
                return []
            node = node.children[char]
        
        # Helper function to collect words from a given Trie node
        suggestions = []
        self._find_words(node, prefix, suggestions)
        return suggestions

    # Helper function to collect words from a Trie node
    def _find_words(self, node, prefix, suggestions):
        if node.is_end_of_word:
            suggestions.append(prefix)
        for char, child_node in node.children.items():
            self._find_words(child_node, prefix + char, suggestions)

# Sample list of words (autocomplete dictionary)
words = ["apple", "app", "application", "bat", "ball", "batman", "cat", "caterpillar"]

# Create the Trie and insert words
trie = Trie()
for word in words:
    trie.insert(word)

# Get autocomplete suggestions
prefix = input("Enter a prefix for suggestions: ")
suggestions = trie.search_with_prefix(prefix)

# Display suggestions
print("Suggestions:")
for suggestion in suggestions:
    print(suggestion)
